#include <iostream>
#include <climits>
using namespace std;

int matrixChainOrder(int p[], int n) {
    int m[n][n];

    for (int i = 1; i < n; i++)
        m[i][i] = 0;

    for (int L = 2; L < n; L++) {
        for (int i = 1; i < n - L + 1; i++) {
            int j = i + L - 1;
            m[i][j] = INT_MAX;

            for (int k = i; k < j; k++) {
                int cost = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (cost < m[i][j]) {
                    m[i][j] = cost;
                }
            }
        }
    }

    return m[1][n - 1];
}

int main() {
    int n;

    cout << "Enter the number of matrices: ";
    cin >> n;

    int p[n + 1]; // We need n+1 dimensions for n matrices

    cout << "Enter the dimensions (length " << n + 1 << "):\n";
    for (int i = 0; i <= n; i++) {
        cout << "p[" << i << "]: ";
        cin >> p[i];
    }

    int result = matrixChainOrder(p, n + 1);
    cout << "Minimum number of multiplications is " << result << endl;

    return 0;
}
